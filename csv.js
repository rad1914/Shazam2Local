// @path: csv.js
import fs from'fs/promises';import path from'path';import{parse}from'csv-parse/sync';import{g,n,k}from'./utils/utils.js';import{p}from'./downloader.js';

export const a=async(c,r)=>{const s=path.basename(c),f=path.join(path.dirname(c),'failed.txt');try{const raw=(await fs.readFile(c,'utf8')).replace(/\u0000|\r/g,'').replace(/\(From\s+"([^"]+)"\)/g,"(From '$1')"),lines=raw.split('\n').slice(2).filter(Boolean);if(!lines.length)return n();const h=['Index','TagTime','Title','Artist','URL','TrackKey'],rows=[];for(let i=0;i<lines.length;i++){try{rows.push(...parse(`${h}\n${lines[i]}`,{columns:!0,relax_quotes:!0,relax_column_count:!0,skip_empty_lines:!0,trim:!0}))}catch{await fs.appendFile(f,`Line ${i+3}: ${lines[i]}\n`)}}const e=rows.map(r=>{const t=g(r,'Title','Song','Track Name','Name'),a=g(r,'Artist','Performer','Artist Name');return t&&a?{title:t,artist:a,sFile:s}:null}).filter(Boolean);return p(e,r,e=>({title:e.title,artist:e.artist,query:`ytsearch1:${e.title} ${e.artist}`,finalName:`${e.title} - ${e.artist}`,checkKeys:k(e,'csv'),extraMeta:{sourceFile:s}}),`"${s}"`)}catch{return n()}};
