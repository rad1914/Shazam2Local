// @path: index.js
import fs from'fs/promises';import path from'path';import{fileURLToPath}from'url';import{exec}from'./exec.js';import{a as c}from'./csv.js';import{c as p}from'./playlist.js';import{d as f}from'./filenames.js';import{lr}from'./record.js';import{O,T}from'./config.js';import{i,w,e,s,S}from'./utils/utils.js';
const d=path.dirname(fileURLToPath(import.meta.url)),h=async(F,P,r,m='No files found.')=>{const L=(await fs.readdir(d)).filter(F);if(!L.length)return w(m);const a=[];for(const x of L){i(`Processing ${x}`);const{successful}=await P(path.join(d,x),r);a.push(...successful)}a.length?(S('\n📊 Downloads this session:'),a.forEach(({title:t,artist:A})=>s(A?`"${t}" by ${A}`:`"${t}"`))):i('No new songs downloaded.')};
(async()=>{try{await exec('yt-dlp --version')}catch{e('yt-dlp not found in PATH');process.exit(1)}await Promise.all([O,T].map(d=>fs.mkdir(d,{recursive:!0})));const[,,m,a]=process.argv;if(!m)return e('Usage:\n  node index.js csv\n  node index.js playlist <url>\n  node index.js filenames'),process.exit(1);const r=await lr(),H={csv:()=>h(f=>f.endsWith('.csv'),c,r,'No CSV files found.'),playlist:async()=>{if(!a)return e('Usage: node index.js playlist <url>'),process.exit(1);const{successful,failed}=await p(a,r);S('\n📊 Session summary:'),s(`Successful: ${successful.length}`),failed.length?e(`Failed: ${failed.length}`):i('Failed: 0'),successful.length&&console.log('\n✔️ Successful:',successful.map(x=>`- ${x.title}`).join('\n')),failed.length&&console.log('\n❌ Failed:',failed.map(x=>`- ${x.title} (${x.reason})`).join('\n'))},filenames:()=>h(f=>f==='filenames.txt',f,r,'No filenames.txt found.')};if(!H[m])return e(`Unknown mode: ${m}`),process.exit(1);await H[m]();i('\nAll done!')})();
