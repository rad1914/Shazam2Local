// @path: index.js
import fs from'fs/promises';import path from'path';import{fileURLToPath}from'url';import{exec}from'./exec.js';import{processCsv}from'./csv.js';import{processPlaylist}from'./playlist.js';import{processFilenames}from'./filenames.js';import{lr}from'./utils/record.js';import{O,T}from'./config.js';import{i,w,e,s,S}from'./utils/utils.js';
const dir=path.dirname(fileURLToPath(import.meta.url)),p=async(f,h,r,m)=>{const F=(await fs.readdir(dir)).filter(f);if(!F.length)return w(m);const d=[];for(const x of F){i(`Processing ${x}`);const R=await h(path.join(dir,x),r);d.push(...(R.successful||[]))}d.length?(S('\n📊 Downloads this session:'),d.forEach(({title:t,artist:a})=>s(a?`"${t}" by ${a}`:`"${t}"`))):i('No new songs downloaded.')};
(async()=>{try{await exec('yt-dlp --version')}catch{e('yt-dlp not found in PATH');process.exit(1)}await Promise.all([O,T].map(d=>fs.mkdir(d,{recursive:!0})));const[,,m,a]=process.argv;if(!m)return e('Usage:\n  node index.js csv\n  node index.js playlist <url>\n  node index.js filenames'),process.exit(1);const r=await lr(),R={csv:()=>p(f=>f.endsWith('.csv'),processCsv,r,'No CSV files found.'),playlist:async()=>{if(!a)return e('Usage: node index.js playlist <url>'),process.exit(1);const{successful:sx,failed:fx}=await processPlaylist(a,r);S('\n📊 Session summary:'),s(`Successful: ${sx.length}`),i(`Failed: ${fx.length}`);sx.length&&console.log('\n✔️ Successful:',sx.map(x=>`- ${x.title}`).join('\n'));fx.length&&console.log('\n❌ Failed:',fx.map(x=>`- ${x.title} (${x.reason})`).join('\n'));},filenames:()=>p(f=>f==='filenames.txt',processFilenames,r,'No filenames.txt found.')}[m];if(!R)return e(`Unknown mode: ${m}`),process.exit(1);await R();i('\nAll done!')})();
